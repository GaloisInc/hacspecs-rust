extern crate hacspec;
use hacspec::*;
hacspec_imports!();

extern crate hacspecs;
use hacspecs::{chacha20::*, poly1305::*};

#[test]
fn basic_test() {
    let key = Key::random();
    let iv = IV::random();
    let m = Bytes::random(40);
    poly_mac(m, key, iv);

    // RFC 7539 Test Vectors
    let msg = Bytes::from_array(&[
        U8(0x43), U8(0x72), U8(0x79), U8(0x70), U8(0x74), U8(0x6f), U8(0x67), U8(0x72),
        U8(0x61), U8(0x70), U8(0x68), U8(0x69), U8(0x63), U8(0x20), U8(0x46), U8(0x6f),
        U8(0x72), U8(0x75), U8(0x6d), U8(0x20), U8(0x52), U8(0x65), U8(0x73), U8(0x65),
        U8(0x61), U8(0x72), U8(0x63), U8(0x68), U8(0x20), U8(0x47), U8(0x72), U8(0x6f),
        U8(0x75), U8(0x70),
    ]);
    let k = Key([
        U8(0x85), U8(0xd6), U8(0xbe), U8(0x78), U8(0x57), U8(0x55), U8(0x6d), U8(0x33),
        U8(0x7f), U8(0x44), U8(0x52), U8(0xfe), U8(0x42), U8(0xd5), U8(0x06), U8(0xa8),
        U8(0x01), U8(0x03), U8(0x80), U8(0x8a), U8(0xfb), U8(0x0d), U8(0xb2), U8(0xfd),
        U8(0x4a), U8(0xbf), U8(0xf6), U8(0xaf), U8(0x41), U8(0x49), U8(0xf5), U8(0x1b),
    ]);
    let expected = Tag([
        U8(0xa8), U8(0x06), U8(0x1d), U8(0xc1), U8(0x30), U8(0x51), U8(0x36), U8(0xc6),
        U8(0xc2), U8(0x2b), U8(0x8b), U8(0xaf), U8(0x0c), U8(0x01), U8(0x27), U8(0xa9),
    ]);
    let computed = poly(msg, k);
    assert_eq!(
        expected.iter().map(|x| U8::declassify(*x)).collect::<Vec<_>>(),
        computed.iter().map(|x| U8::declassify(*x)).collect::<Vec<_>>()
    );
}
